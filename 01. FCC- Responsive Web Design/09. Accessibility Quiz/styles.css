/* max funciton

    CSS has a max function which returns the largest of a set of comma-separated values. 
    
    For example:
        img {
        width: max(250px, 25vw);
        }

    ! In the above example, the width of the image will be 250px if the viewport width is less than 1000 pixels. 
    If the viewport width is greater than 1000 pixels, the width of the image will be 25vw. 
    This is because 25vw is equal to 25% of the viewport width.
*/


/* child combinator selector >

    The child combinator selector in CSS is used to select elements that are direct children of a specified element.
    It is represented by the greater-than symbol (>). 
    This selector only targets elements that are immediate children, not deeper descendants.

    parent > child {
        styles 
        }


    an elaboration:
        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Child Combinator Example</title>
        <style>
            div > p {
            color: blue;
            }
        </style>
        </head>
        <body>
        <div>
            <p>This paragraph is a direct child of the div and will be blue.</p>
            <div>
            <p>This paragraph is a descendant but not a direct child, so it won't be blue.</p>
            </div>
        </div>
        </body>
        </html>

*/

/* Removing line under text (link elements)

    text-decoration: none;
*/

/* fixing header to the top

    position: fixed;


    specifing the position relative to the top of viewport:
        top: 0;

*/

/* Aligning all the input boxes and labels

To align the input boxes with each other, create a new ruleset that targets all input and label elements within an .info element and set the display property to inline-block.
    display: inline-block;
*/

/* Removing or adjusting list item bullets

    ul {
    list-style: circle;
    }

    set it to none for removal of the bullets.
        in order to create choosable items using radio type inputs.

        ! name them the same so you could only choose one.

*/

/* scroll-behaviour

    Clicking on the navigation links should jump the viewport to the relevant section. However, this jumping can be disorienting for some users.

    Select all elements, and set the scroll-behavior to smooth.

*/

/* ! ".info label, .info input {} "vs "info label, input {}"

    .info label, .info input {}: 
        Targets <label> and <input> elements within elements with the class info.

    info label, input {}: 
        Targets <label> elements within <info> elements and all <input> elements on the page.

*/

/* @  at-rule

    In CSS, at-rules are special instructions that begin with the @ symbol and provide the CSS engine with specific directives on how to behave. 
    These rules can control various aspects of the stylesheet, such as :
        importing external stylesheets, 
        defining media queries, 
        or specifying font faces



    Common At-Rules:
        @charset
            Defines the character set used by the stylesheet.

            Example: 
                @charset "UTF-8";

    
        @import
            Imports an external stylesheet.

            Example: 
                @import url("styles.css");

        @media
            Applies styles based on media queries (e.g., screen size).

            syntax:
            @media (feature: value) {
                selector {
                    styles
                    }
                }

            Example:
                @media (max-width: 600px) {
                    body {
                        background-color: lightblue;
                    }
                }

            prefers-reduced-motion feature
            it has a media feature called prefers-reduced-motion to set CSS based on the user's preferences. 
            It can take one of the following values:
                * reduce
                * no-preference

            Example:
                @media (prefers-reduced-motion: no-preference) {
                    * {
                    scroll-behavior: smooth;
                    }
                }
        
    
        @font-face
            Defines custom fonts to be used in the document.

            Example:
                @font-face {
                    font-family: 'MyFont';
                    src: url('myfont.woff2') format('woff2');
                }

        @keyframes
            Defines animations.
            
            Example:
                @keyframes slidein {
                    from {
                        transform: translateX(0%);
                    }
                    to {
                        transform: translateX(100%);
                    }
                }


        @supports
            Applies styles if a browser supports certain CSS features.

            Example:
                @supports (display: grid) {
                    div {
                        display: grid;
                    }
                }


        @namespace
            Declares an XML namespace.
            
            Example:
                @namespace url(http://www.w3.org/1999/xhtml);


*/

/* cursor to a pointer

    cursor: pointer;
*/

@media (prefers-reduced-motion: no-preference) {
* {
    scroll-behavior: smooth;
}
}

body {
background: #f5f6f7;
color: #1b1b32;
font-family: Helvetica;
margin: 0;
}

header {
width: 100%;
height: 50px;
background-color: #1b1b32;
display: flex;
justify-content: space-between;
align-items: center;
position: fixed;
top: 0;
}

#logo {
width: max(10rem, 18vw);
background-color: #0a0a23;
aspect-ratio: 35 / 4;
padding: 0.4rem;
}

h1 {
color: #f1be32;
font-size: min(5vw, 1.2em);
text-align: center;
}

nav {
width: 50%;
max-width: 300px;
height: 50px;
}

nav > ul {
display: flex;
justify-content: space-evenly;
flex-wrap: wrap;
align-items: center;
padding-inline-start: 0;
margin-block: 0;
height: 100%;
}

nav > ul > li {
color: #dfdfe2;
margin: 0 0.2rem;
padding: 0.2rem;
display: block;
}

nav > ul > li:hover {
background-color: #dfdfe2;
color: #1b1b32;
cursor: pointer;
}

li > a {
color: inherit;
text-decoration: none;
}

main {
padding-top: 50px;
}

section {
width: 80%;
margin: 0 auto 10px auto;
max-width: 600px;
}

h1,
h2 {
font-family: Verdana, Tahoma;
}

h2 {
border-bottom: 4px solid #dfdfe2;
margin-top: 0px;
padding-top: 60px;
}

.info {
padding: 10px 0 0 5px;
}

.formrow {
margin-top: 30px;
padding: 0px 15px;
}

input {
font-size: 16px;
}

.info label, .info input {
display: inline-block;
}

.info input {
width: 50%;
text-align: left;
}

.info label {
width: 10%;
min-width: 55px;
text-align: right;
}

.question-block {
text-align: left;
display: block;
width: 100%;
margin-top: 20px;
padding-top: 5px;
}

h3 {
margin-top: 5px;
padding-left: 15px;
font-size: 20px;
}

h3::before {
content: "Question #";
}

.question {
border: none;
padding-bottom: 0;
}

.answers-list {
list-style: none;
padding: 0;
}

button {
display: block;
margin: 40px auto;
width: 40%;
padding: 15px;
font-size: 23px;
background: #d0d0d5;
border: 3px solid #3b3b4f;
}

footer {
background-color: #2a2a40;
display: flex;
justify-content: center;
}

footer,
footer a {
color: #dfdfe2;
}

address {
text-align: center;
padding: 0.3em;
}

.sr-only {
position: absolute;
width: 1px;
height: 1px;
padding: 0;
margin: -1px;
overflow: hidden;
clip: rect(0, 0, 0, 0);
white-space: nowrap;
border: 0;
}
